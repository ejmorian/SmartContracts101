//import Ethers.js for node runtime
const { ethers } = require("ethers");
// package for handling files
const fs = require("fs-extra");

// async function for waiting for functions that fetches an API
async function main() {

    // connects to local ethereum network
    const provider = new ethers.providers.JsonRpcProvider("http://127.0.0.1:7545");

    // initialise ethereum wallet
    const wallet = new ethers.Wallet("0x6bda5e436373d04d1ff237e80970eb74dcbc35297bb2b7f269691be5b7c738d9", provider);

    // const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
    // const bin = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf8");

    // const contract = new ethers.ContractFactory(abi, bin, wallet);
    // const mycontract = await contract.deploy();
    // console.log(mycontract);

    console.log("lets deploy with only transaction data!");
    const nonce =  wallet.getTransactionCount();
    console.log(nonce);

    const tx = {
        nonce: nonce,
        gasPrice: 20000000000,
        gasLimit: 1000000,
        to: null,
        value: 0,
        data: "0x608060405234801561001057600080fd5b50610938806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806343ede4ae1461005c578063666c65e01461007a5780637d0d4d18146100965780639e7a13ad146100c6578063acca388f146100f7575b600080fd5b610064610113565b60405161007191906102af565b60405180910390f35b610094600480360381019061008f9190610450565b610119565b005b6100b060048036038101906100ab91906104ac565b6101a2565b6040516100bd91906102af565b60405180910390f35b6100e060048036038101906100db91906104f5565b6101d0565b6040516100ee9291906105a1565b60405180910390f35b610111600480360381019061010c91906104f5565b61028c565b005b60005481565b60016040518060400160405280848152602001838152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908161016e91906107dd565b506020820151816001015550508060028360405161018c91906108eb565b9081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600181815481106101e057600080fd5b906000526020600020906002020160009150905080600001805461020390610600565b80601f016020809104026020016040519081016040528092919081815260200182805461022f90610600565b801561027c5780601f106102515761010080835404028352916020019161027c565b820191906000526020600020905b81548152906001019060200180831161025f57829003601f168201915b5050505050908060010154905082565b8060008190555050565b6000819050919050565b6102a981610296565b82525050565b60006020820190506102c460008301846102a0565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610331826102e8565b810181811067ffffffffffffffff821117156103505761034f6102f9565b5b80604052505050565b60006103636102ca565b905061036f8282610328565b919050565b600067ffffffffffffffff82111561038f5761038e6102f9565b5b610398826102e8565b9050602081019050919050565b82818337600083830152505050565b60006103c76103c284610374565b610359565b9050828152602081018484840111156103e3576103e26102e3565b5b6103ee8482856103a5565b509392505050565b600082601f83011261040b5761040a6102de565b5b813561041b8482602086016103b4565b91505092915050565b61042d81610296565b811461043857600080fd5b50565b60008135905061044a81610424565b92915050565b60008060408385031215610467576104666102d4565b5b600083013567ffffffffffffffff811115610485576104846102d9565b5b610491858286016103f6565b92505060206104a28582860161043b565b9150509250929050565b6000602082840312156104c2576104c16102d4565b5b600082013567ffffffffffffffff8111156104e0576104df6102d9565b5b6104ec848285016103f6565b91505092915050565b60006020828403121561050b5761050a6102d4565b5b60006105198482850161043b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561055c578082015181840152602081019050610541565b60008484015250505050565b600061057382610522565b61057d818561052d565b935061058d81856020860161053e565b610596816102e8565b840191505092915050565b600060408201905081810360008301526105bb8185610568565b90506105ca60208301846102a0565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061061857607f821691505b60208210810361062b5761062a6105d1565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610656565b61069d8683610656565b95508019841693508086168417925050509392505050565b6000819050919050565b60006106da6106d56106d084610296565b6106b5565b610296565b9050919050565b6000819050919050565b6106f4836106bf565b610708610700826106e1565b848454610663565b825550505050565b600090565b61071d610710565b6107288184846106eb565b505050565b5b8181101561074c57610741600082610715565b60018101905061072e565b5050565b601f8211156107915761076281610631565b61076b84610646565b8101602085101561077a578190505b61078e61078685610646565b83018261072d565b50505b505050565b600082821c905092915050565b60006107b460001984600802610796565b1980831691505092915050565b60006107cd83836107a3565b9150826002028217905092915050565b6107e682610522565b67ffffffffffffffff8111156107ff576107fe6102f9565b5b6108098254610600565b610814828285610750565b600060209050601f8311600181146108475760008415610835578287015190505b61083f85826107c1565b8655506108a7565b601f19841661085586610631565b60005b8281101561087d57848901518255600182019150602085019450602081019050610858565b8683101561089a5784890151610896601f8916826107a3565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60006108c582610522565b6108cf81856108af565b93506108df81856020860161053e565b80840191505092915050565b60006108f782846108ba565b91508190509291505056fea26469706673582212206389e45ee788c59c5d2b1d4020639d8241ba64cf9a56fea09e06124e04277a7d64736f6c63430008130033",
        chainId: 1337
    }
    const sentTxResponse = await wallet.sendTransaction(tx);
    await sentTxResponse.wait(1);

    console.log(sentTxResponse);

}

main().then(() => process.exit(0)).catch();