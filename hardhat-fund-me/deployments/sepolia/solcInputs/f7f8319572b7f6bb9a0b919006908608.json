{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Title: Fund Me\n\n//SPDX-License-Identifier: MIT\n\nimport \"./PriceConverter.sol\";\n\npragma solidity ^0.8.8;\nerror UnAuthorized();\n\ncontract FundMe {\n  using PriceConverter for uint256;\n  address public immutable i_owner;\n  AggregatorV3Interface public priceFeedAddress;\n\n  constructor(address _priceFeed) {\n    priceFeedAddress = AggregatorV3Interface(_priceFeed);\n    i_owner = msg.sender;\n  }\n\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n\n  uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n  address[] public funders;\n  mapping(address => uint256) public addressToAmountFunded;\n\n  function fund() public payable {\n    require(\n      msg.value.getConversionRate(priceFeedAddress) >= MINIMUM_USD,\n      \"Didn't Send Enough\"\n    );\n\n    funders.push(msg.sender);\n    addressToAmountFunded[msg.sender] = msg.value;\n  }\n\n  function Withdraw() public onlyOwner {\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n      address funder = funders[funderIndex];\n\n      addressToAmountFunded[funder] = 0;\n    }\n\n    funders = new address[](0);\n\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"error\");\n  }\n\n  modifier onlyOwner() {\n    if (msg.sender != i_owner) {\n      revert UnAuthorized();\n    }\n    _;\n  }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n//import chainlink data feeds ABI\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  // gets the price of 1ETH to USD\n  function getPrice(\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\n    return uint256(answer * 1e10);\n  }\n\n  function getConversionRate(\n    uint256 _ethAmount,\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    return ((_ethAmount * getPrice(priceFeed)) / 1e18);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}